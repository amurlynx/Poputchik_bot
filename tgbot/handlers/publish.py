from aiogram import Router
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from infrastructure.database.models.announcement import Announcement

import os

publish_router = Router()
CHANNEL_ID = 2570221929 #int(os.getenv("CHANNEL_ID"))

@publish_router.message(commands=["publish"])
async def publish_announcements(message: Message, session: AsyncSession):
    if message.from_user.id not in map(int, os.getenv("ADMIN_IDS").split(",")):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    result = await session.execute(select(Announcement))
    announcements = result.scalars().all()

    if not announcements:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    text = "üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤:\n\n"
    for a in announcements:
        text += (
            f"üë• {a.people_needed} —á–µ–ª.\n"
            f"üõ§ {a.route}\n"
            f"üìÖ {a.start_date} - {a.end_date}\n"
            f"üí¨ {a.notes or '‚Äî'}\n"
            f"‚úâÔ∏è @{a.username}\n\n"
        )

    await message.bot.send_message(CHANNEL_ID, text)
    await message.answer("–°–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
